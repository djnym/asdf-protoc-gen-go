#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
# capture the go version currently in use by asdf, assuming you are installing from
# the directory with the tool defined.  The following is the cleanest way I could
# find to get the version of golang used

# first check if go is provided by asdf
GOVERSION=
if asdf list golang > /dev/null 2>&1 ; then
  GOVERSION=$(basename $(asdf where golang))
fi
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=../lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

mkdir -p "$ASDF_DOWNLOAD_PATH"

# TODO: Adapt this to proper extension and adapt extracting strategy.
release_file="$ASDF_DOWNLOAD_PATH/$TOOL_NAME-$ASDF_INSTALL_VERSION.tar.gz"

# Download tar.gz file to the download directory
download_release "$ASDF_INSTALL_VERSION" "$release_file"

#  Extract contents of tar.gz file into the download directory
tar -xzf "$release_file" -C "$ASDF_DOWNLOAD_PATH" --strip-components=1 || fail "Could not extract $release_file"

# Build protoc-gen-go binary
pushd "$ASDF_DOWNLOAD_PATH"/cmd/$TOOL_NAME >/dev/null 2>&1 || exit 1
# if we found we were running within asdf, we'll add a .tool-version with the version of
# go used via asdf for the current run path
if test -n "$GOVERSION"; then
  if ! test -f .tool-versions; then
    echo "golang $GOVERSION" > .tool-versions
  fi
fi
go build || fail "Could not build $TOOL_NAME from $ASDF_DOWNLOAD_PATH"
rm -f .tool-versions  # remove the temporary .tool-versions in case it matters
popd >/dev/null 2>&1 || exit 1

# Remove the tar.gz file since we don't need to keep it
rm "$release_file"
